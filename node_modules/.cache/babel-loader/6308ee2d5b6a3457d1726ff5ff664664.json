{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\thinkfornecedoresfront\\\\src\\\\components\\\\SelectSource\\\\index.js\";\nimport React, { useState } from 'react';\nimport { Row, Col, Spin } from 'antd';\nimport styled from 'styled-components';\nimport { gapi } from 'gapi-script';\nimport GoogleDriveImage from '../../assets/images/google-drive.png';\nimport ListDocuments from '../ListDocuments';\nimport { style } from './styles';\nconst NewDocumentWrapper = styled.div`\n  ${style}\n`; // Client ID and API key from the Developer Console\n\nconst CLIENT_ID = process.env.REACT_APP_GOOGLE_DRIVE_CLIENT_ID;\nconst API_KEY = process.env.REACT_APP_GOOGLE_DRIVE_API_KEY; // Array of API discovery doc URLs for APIs\n\nconst DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']; // Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\n\nconst SCOPES = 'https://www.googleapis.com/auth/drive.metadata.readonly';\n\nconst SelectSource = () => {\n  const [listDocumentsVisible, setListDocumentsVisibility] = useState(false);\n  const [documents, setDocuments] = useState([]);\n  const [isLoadingGoogleDriveApi, setIsLoadingGoogleDriveApi] = useState(false);\n  const [isFetchingGoogleDriveFiles, setIsFetchingGoogleDriveFiles] = useState(false);\n  const [signedInUser, setSignedInUser] = useState();\n\n  const handleChange = file => {};\n  /**\n   * Print files.\n   */\n\n\n  const listFiles = (searchTerm = null) => {\n    setIsFetchingGoogleDriveFiles(true);\n    gapi.client.drive.files.list({\n      pageSize: 10,\n      fields: 'nextPageToken, files(id, name, mimeType, modifiedTime)',\n      q: searchTerm\n    }).then(function (response) {\n      setIsFetchingGoogleDriveFiles(false);\n      setListDocumentsVisibility(true);\n      const res = JSON.parse(response.body);\n      setDocuments(res.files);\n    });\n  };\n  /**\n   *  Sign in the user upon button click.\n   */\n\n\n  const handleAuthClick = event => {\n    gapi.auth2.getAuthInstance().signIn();\n  };\n  /**\n   *  Called when the signed in status changes, to update the UI\n   *  appropriately. After a sign-in, the API is called.\n   */\n\n\n  const updateSigninStatus = isSignedIn => {\n    if (isSignedIn) {\n      // Set the signed in user\n      setSignedInUser(gapi.auth2.getAuthInstance().currentUser.je.Qt);\n      setIsLoadingGoogleDriveApi(false); // list files if user is authenticated\n\n      listFiles();\n    } else {\n      // prompt user to sign in\n      handleAuthClick();\n    }\n  };\n  /**\n   *  Sign out the user upon button click.\n   */\n\n\n  const handleSignOutClick = event => {\n    setListDocumentsVisibility(false);\n    gapi.auth2.getAuthInstance().signOut();\n  };\n  /**\n  *  Initializes the API client library and sets up sign-in state\n  *  listeners.\n  */\n\n  /**\n   *  Initializes the API client library and sets up sign-in state\n   *  listeners.\n   */\n\n\n  const initClient = () => {\n    setIsLoadingGoogleDriveApi(true);\n    gapi.client.init({\n      apiKey: API_KEY,\n      clientId: CLIENT_ID,\n      discoveryDocs: DISCOVERY_DOCS,\n      scope: SCOPES\n    }).then(function () {\n      // Listen for sign-in state changes.\n      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus); // Handle the initial sign-in state.\n\n      updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n    }, function (error) {});\n  };\n\n  const handleClientLoad = () => {\n    gapi.load('client:auth2', initClient);\n  };\n\n  const showDocuments = () => {\n    setListDocumentsVisibility(true);\n  };\n\n  const onClose = () => {\n    setListDocumentsVisibility(false);\n  };\n\n  return /*#__PURE__*/React.createElement(NewDocumentWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: 16,\n    className: \"custom-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ListDocuments, {\n    visible: listDocumentsVisible,\n    onClose: onClose,\n    documents: documents,\n    onSearch: listFiles,\n    signedInUser: signedInUser,\n    onSignOut: handleSignOutClick,\n    isLoading: isFetchingGoogleDriveFiles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Spin, {\n    spinning: isLoadingGoogleDriveApi,\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => handleClientLoad(),\n    className: \"source-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"icon-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"icon icon-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, \"Google Drive\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, \"Import documents straight from your google drive\")))))));\n};\n\nexport default SelectSource;","map":{"version":3,"sources":["C:/wamp64/www/thinkfornecedoresfront/src/components/SelectSource/index.js"],"names":["React","useState","Row","Col","Spin","styled","gapi","GoogleDriveImage","ListDocuments","style","NewDocumentWrapper","div","CLIENT_ID","process","env","REACT_APP_GOOGLE_DRIVE_CLIENT_ID","API_KEY","REACT_APP_GOOGLE_DRIVE_API_KEY","DISCOVERY_DOCS","SCOPES","SelectSource","listDocumentsVisible","setListDocumentsVisibility","documents","setDocuments","isLoadingGoogleDriveApi","setIsLoadingGoogleDriveApi","isFetchingGoogleDriveFiles","setIsFetchingGoogleDriveFiles","signedInUser","setSignedInUser","handleChange","file","listFiles","searchTerm","client","drive","files","list","pageSize","fields","q","then","response","res","JSON","parse","body","handleAuthClick","event","auth2","getAuthInstance","signIn","updateSigninStatus","isSignedIn","currentUser","je","Qt","handleSignOutClick","signOut","initClient","init","apiKey","clientId","discoveryDocs","scope","listen","get","error","handleClientLoad","load","showDocuments","onClose","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,QAA+B,MAA/B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,SAASC,KAAT,QAAsB,UAAtB;AAEA,MAAMC,kBAAkB,GAAGL,MAAM,CAACM,GAAI;IAClCF,KAAM;CADV,C,CAIA;;AACA,MAAMG,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,gCAA9B;AACA,MAAMC,OAAO,GAAGH,OAAO,CAACC,GAAR,CAAYG,8BAA5B,C,CAGA;;AACA,MAAMC,cAAc,GAAG,CAAC,4DAAD,CAAvB,C,CAEA;AACA;;AACA,MAAMC,MAAM,GAAG,yDAAf;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAM,CAACC,oBAAD,EAAuBC,0BAAvB,IAAqDrB,QAAQ,CAAC,KAAD,CAAnE;AACA,QAAM,CAACsB,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACwB,uBAAD,EAA0BC,0BAA1B,IAAwDzB,QAAQ,CAAC,KAAD,CAAtE;AACA,QAAM,CAAC0B,0BAAD,EAA6BC,6BAA7B,IAA8D3B,QAAQ,CAAC,KAAD,CAA5E;AACA,QAAM,CAAC4B,YAAD,EAAeC,eAAf,IAAkC7B,QAAQ,EAAhD;;AACA,QAAM8B,YAAY,GAAIC,IAAD,IAAU,CAAE,CAAjC;AAIA;;;;;AAGA,QAAMC,SAAS,GAAG,CAACC,UAAU,GAAG,IAAd,KAAuB;AACvCN,IAAAA,6BAA6B,CAAC,IAAD,CAA7B;AACAtB,IAAAA,IAAI,CAAC6B,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CACGC,IADH,CACQ;AACJC,MAAAA,QAAQ,EAAE,EADN;AAEJC,MAAAA,MAAM,EAAE,wDAFJ;AAGJC,MAAAA,CAAC,EAAEP;AAHC,KADR,EAMGQ,IANH,CAMQ,UAAUC,QAAV,EAAoB;AACxBf,MAAAA,6BAA6B,CAAC,KAAD,CAA7B;AACAN,MAAAA,0BAA0B,CAAC,IAAD,CAA1B;AACA,YAAMsB,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,IAApB,CAAZ;AACAvB,MAAAA,YAAY,CAACoB,GAAG,CAACP,KAAL,CAAZ;AACD,KAXH;AAYD,GAdD;AAgBA;;;;;AAGA,QAAMW,eAAe,GAAIC,KAAD,IAAW;AACjC3C,IAAAA,IAAI,CAAC4C,KAAL,CAAWC,eAAX,GAA6BC,MAA7B;AACD,GAFD;AAIA;;;;;;AAIA,QAAMC,kBAAkB,GAAIC,UAAD,IAAgB;AACzC,QAAIA,UAAJ,EAAgB;AACd;AACAxB,MAAAA,eAAe,CAACxB,IAAI,CAAC4C,KAAL,CAAWC,eAAX,GAA6BI,WAA7B,CAAyCC,EAAzC,CAA4CC,EAA7C,CAAf;AACA/B,MAAAA,0BAA0B,CAAC,KAAD,CAA1B,CAHc,CAId;;AACAO,MAAAA,SAAS;AACV,KAND,MAMO;AACL;AACAe,MAAAA,eAAe;AAChB;AACF,GAXD;AAaA;;;;;AAGA,QAAMU,kBAAkB,GAAIT,KAAD,IAAW;AACpC3B,IAAAA,0BAA0B,CAAC,KAAD,CAA1B;AACAhB,IAAAA,IAAI,CAAC4C,KAAL,CAAWC,eAAX,GAA6BQ,OAA7B;AACD,GAHD;AAKE;;;;;AAIF;;;;;;AAIA,QAAMC,UAAU,GAAG,MAAM;AACvBlC,IAAAA,0BAA0B,CAAC,IAAD,CAA1B;AACApB,IAAAA,IAAI,CAAC6B,MAAL,CAEG0B,IAFH,CAEQ;AACJC,MAAAA,MAAM,EAAE9C,OADJ;AAEJ+C,MAAAA,QAAQ,EAAEnD,SAFN;AAGJoD,MAAAA,aAAa,EAAE9C,cAHX;AAIJ+C,MAAAA,KAAK,EAAE9C;AAJH,KAFR,EAUGuB,IAVH,CAYI,YAAY;AACV;AACApC,MAAAA,IAAI,CAAC4C,KAAL,CAAWC,eAAX,GAA6BG,UAA7B,CAAwCY,MAAxC,CAA+Cb,kBAA/C,EAFU,CAIV;;AACAA,MAAAA,kBAAkB,CAAC/C,IAAI,CAAC4C,KAAL,CAAWC,eAAX,GAA6BG,UAA7B,CAAwCa,GAAxC,EAAD,CAAlB;AAED,KAnBL,EAoBI,UAAUC,KAAV,EAAiB,CAAE,CApBvB;AAsBD,GAxBD;;AA4BA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B/D,IAAAA,IAAI,CAACgE,IAAL,CAAU,cAAV,EAA0BV,UAA1B;AACD,GAFD;;AAIA,QAAMW,aAAa,GAAG,MAAM;AAC1BjD,IAAAA,0BAA0B,CAAC,IAAD,CAA1B;AACD,GAFD;;AAIA,QAAMkD,OAAO,GAAG,MAAM;AACpBlD,IAAAA,0BAA0B,CAAC,KAAD,CAA1B;AACD,GAFD;;AAIA,sBACE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,EAAb;AAAiB,IAAA,SAAS,EAAC,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,OAAO,EAAED,oBADX;AAEE,IAAA,OAAO,EAAEmD,OAFX;AAGE,IAAA,SAAS,EAAEjD,SAHb;AAIE,IAAA,QAAQ,EAAEU,SAJZ;AAKE,IAAA,YAAY,EAAEJ,YALhB;AAME,IAAA,SAAS,EAAE6B,kBANb;AAOE,IAAA,SAAS,EAAE/B,0BAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAUE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEF,uBAAhB;AAAyC,IAAA,KAAK,EAAE;AAAEgD,MAAAA,KAAK,EAAE;AAAT,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,OAAO,EAAE,MAAMJ,gBAAgB,EAApC;AAAwC,IAAA,SAAS,EAAC,kBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAME;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAM,IAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAFF,CANF,CADF,CADF,CAVF,CADF,CADF;AA8BD,CA3ID;;AA6IA,eAAejD,YAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Row, Col, Spin } from 'antd';\nimport styled from 'styled-components';\nimport { gapi } from 'gapi-script';\nimport GoogleDriveImage from '../../assets/images/google-drive.png';\nimport ListDocuments from '../ListDocuments';\nimport { style } from './styles';\n\nconst NewDocumentWrapper = styled.div`\n  ${style}\n`;\n\n// Client ID and API key from the Developer Console\nconst CLIENT_ID = process.env.REACT_APP_GOOGLE_DRIVE_CLIENT_ID;\nconst API_KEY = process.env.REACT_APP_GOOGLE_DRIVE_API_KEY;\n\n\n// Array of API discovery doc URLs for APIs\nconst DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'];\n\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nconst SCOPES = 'https://www.googleapis.com/auth/drive.metadata.readonly';\n\nconst SelectSource = () => {\n  const [listDocumentsVisible, setListDocumentsVisibility] = useState(false);\n  const [documents, setDocuments] = useState([]);\n  const [isLoadingGoogleDriveApi, setIsLoadingGoogleDriveApi] = useState(false);\n  const [isFetchingGoogleDriveFiles, setIsFetchingGoogleDriveFiles] = useState(false);\n  const [signedInUser, setSignedInUser] = useState();\n  const handleChange = (file) => {};\n\n\n\n  /**\n   * Print files.\n   */\n  const listFiles = (searchTerm = null) => {\n    setIsFetchingGoogleDriveFiles(true);\n    gapi.client.drive.files\n      .list({\n        pageSize: 10,\n        fields: 'nextPageToken, files(id, name, mimeType, modifiedTime)',\n        q: searchTerm,\n      })\n      .then(function (response) {\n        setIsFetchingGoogleDriveFiles(false);\n        setListDocumentsVisibility(true);\n        const res = JSON.parse(response.body);\n        setDocuments(res.files);\n      });\n  };\n\n  /**\n   *  Sign in the user upon button click.\n   */\n  const handleAuthClick = (event) => {\n    gapi.auth2.getAuthInstance().signIn();\n  };\n\n  /**\n   *  Called when the signed in status changes, to update the UI\n   *  appropriately. After a sign-in, the API is called.\n   */\n  const updateSigninStatus = (isSignedIn) => {\n    if (isSignedIn) {\n      // Set the signed in user\n      setSignedInUser(gapi.auth2.getAuthInstance().currentUser.je.Qt);\n      setIsLoadingGoogleDriveApi(false);\n      // list files if user is authenticated\n      listFiles();\n    } else {\n      // prompt user to sign in\n      handleAuthClick();\n    }\n  };\n\n  /**\n   *  Sign out the user upon button click.\n   */\n  const handleSignOutClick = (event) => {\n    setListDocumentsVisibility(false);\n    gapi.auth2.getAuthInstance().signOut();\n  };\n\n    /**\n   *  Initializes the API client library and sets up sign-in state\n   *  listeners.\n   */\n  /**\n   *  Initializes the API client library and sets up sign-in state\n   *  listeners.\n   */\n  const initClient = () => {\n    setIsLoadingGoogleDriveApi(true);\n    gapi.client\n   \n      .init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES,\n        \n        \n      })\n      .then(\n        \n        function () {\n          // Listen for sign-in state changes.\n          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n          // Handle the initial sign-in state.\n          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n          \n        },\n        function (error) {}\n      );\n  };\n\n\n\n  const handleClientLoad = () => {\n    gapi.load('client:auth2', initClient);\n  };\n\n  const showDocuments = () => {\n    setListDocumentsVisibility(true);\n  };\n\n  const onClose = () => {\n    setListDocumentsVisibility(false);\n  };\n\n  return (\n    <NewDocumentWrapper>\n      <Row gutter={16} className=\"custom-row\">\n        <ListDocuments\n          visible={listDocumentsVisible}\n          onClose={onClose}\n          documents={documents}\n          onSearch={listFiles}\n          signedInUser={signedInUser}\n          onSignOut={handleSignOutClick}\n          isLoading={isFetchingGoogleDriveFiles}\n        />\n        <Col span={8}>\n          <Spin spinning={isLoadingGoogleDriveApi} style={{ width: '100%' }}>\n            <div onClick={() => handleClientLoad()} className=\"source-container\">\n              <div className=\"icon-container\">\n                <div className=\"icon icon-success\">\n                \n                </div>\n              </div>\n              <div className=\"content-container\">\n                <p className=\"title\">Google Drive</p>\n                <span className=\"content\">Import documents straight from your google drive</span>\n              </div>\n            </div>\n          </Spin>\n        </Col>\n      </Row>\n    </NewDocumentWrapper>\n  );\n};\n\nexport default SelectSource;\n"]},"metadata":{},"sourceType":"module"}