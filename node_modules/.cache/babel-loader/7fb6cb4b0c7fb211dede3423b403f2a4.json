{"ast":null,"code":"const {\n  google\n} = require('googleapis');\n\nconst fs = require('fs');\n\nconst credentials = require('../../credentials.json');\n\nconst scopes = ['https://www.googleapis.com/auth/drive'];\nconst auth = new google.auth.JWT(credentials.client_email, null, credentials.private_key, scopes);\nconst drive = google.drive({\n  version: 'v3',\n  auth\n});\nconst sheets = google.sheets({\n  version: 'v4',\n  auth\n});\n\n(async function () {\n  let res = await drive.files.list({\n    pageSize: 20,\n    fields: 'files(name,fullFileExtension,webViewLink)',\n    orderBy: 'createdTime desc'\n  }); // Create a new spreadsheet\n\n  let newSheet = await sheets.spreadsheets.create({\n    resource: {\n      properties: {\n        title: 'Another Day, Another Spreadsheet'\n      }\n    }\n  }); // Move the spreadsheet\n\n  const updatedSheet = await drive.files.update({\n    fileId: newSheet.data.spreadsheetId,\n    // Add your own file ID:\n    addParents: '1Kyd0SwMUuDaIhs03XtKG849-d6Ku_hRE',\n    fields: 'id, parents'\n  }); // Transfer ownership\n\n  await drive.permissions.create({\n    fileId: newSheet.data.spreadsheetId,\n    transferOwnership: 'true',\n    resource: {\n      role: 'owner',\n      type: 'user',\n      // Add your own email address:\n      emailAddress: 'youremail@gmail.com'\n    }\n  }); // Add data as new rows\n\n  let sheetData = [['File Name', 'URL']];\n  res.data.files.map(entry => {\n    const {\n      name,\n      webViewLink\n    } = entry;\n    sheetData.push([name, webViewLink]);\n  });\n  sheets.spreadsheets.values.append({\n    spreadsheetId: newSheet.data.spreadsheetId,\n    valueInputOption: 'USER_ENTERED',\n    range: 'A1',\n    resource: {\n      range: 'A1',\n      majorDimension: 'ROWS',\n      values: sheetData\n    }\n  }); // Add styling to the first row\n\n  await sheets.spreadsheets.batchUpdate({\n    spreadsheetId: newSheet.data.spreadsheetId,\n    resource: {\n      requests: [{\n        repeatCell: {\n          range: {\n            startRowIndex: 0,\n            endRowIndex: 1\n          },\n          cell: {\n            userEnteredFormat: {\n              backgroundColor: {\n                red: 0.2,\n                green: 0.2,\n                blue: 0.2\n              },\n              textFormat: {\n                foregroundColor: {\n                  red: 1,\n                  green: 1,\n                  blue: 1\n                },\n                bold: true\n              }\n            }\n          },\n          fields: 'userEnteredFormat(backgroundColor,textFormat)'\n        }\n      }]\n    }\n  }); // Back-up data locally\n\n  let data = 'Name,URL\\n';\n  res.data.files.map(entry => {\n    const {\n      name,\n      webViewLink\n    } = entry;\n    data += `${name},${webViewLink}\\n`;\n  });\n  fs.writeFile('data.csv', data, err => {\n    if (err) throw err;\n  });\n})();","map":{"version":3,"sources":["C:/wamp64/www/thinkfornecedoresfront/src/components/googledrive/googledrive.js"],"names":["google","require","fs","credentials","scopes","auth","JWT","client_email","private_key","drive","version","sheets","res","files","list","pageSize","fields","orderBy","newSheet","spreadsheets","create","resource","properties","title","updatedSheet","update","fileId","data","spreadsheetId","addParents","permissions","transferOwnership","role","type","emailAddress","sheetData","map","entry","name","webViewLink","push","values","append","valueInputOption","range","majorDimension","batchUpdate","requests","repeatCell","startRowIndex","endRowIndex","cell","userEnteredFormat","backgroundColor","red","green","blue","textFormat","foregroundColor","bold","writeFile","err"],"mappings":"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","sourcesContent":["const { google } = require('googleapis');\r\nconst fs = require('fs');\r\n\r\nconst credentials = require('../../credentials.json');\r\n\r\nconst scopes = [\r\n  'https://www.googleapis.com/auth/drive'\r\n];\r\n\r\nconst auth = new google.auth.JWT(\r\n  credentials.client_email, null,\r\n  credentials.private_key, scopes\r\n);\r\n\r\nconst drive = google.drive({ version: 'v3', auth });\r\nconst sheets = google.sheets({ version: 'v4', auth });\r\n\r\n(async function () {\r\n\r\n  let res = await drive.files.list({\r\n    pageSize: 20,\r\n    fields: 'files(name,fullFileExtension,webViewLink)',\r\n    orderBy: 'createdTime desc'\r\n  });\r\n\r\n  // Create a new spreadsheet\r\n  let newSheet = await sheets.spreadsheets.create({\r\n    resource: {\r\n      properties: {\r\n        title: 'Another Day, Another Spreadsheet',\r\n      }\r\n    }\r\n  });\r\n\r\n  // Move the spreadsheet\r\n  const updatedSheet = await drive.files.update({\r\n    fileId: newSheet.data.spreadsheetId,\r\n    // Add your own file ID:\r\n    addParents: '1Kyd0SwMUuDaIhs03XtKG849-d6Ku_hRE',\r\n    fields: 'id, parents'\r\n  });\r\n\r\n  // Transfer ownership\r\n  await drive.permissions.create({\r\n    fileId: newSheet.data.spreadsheetId,\r\n    transferOwnership: 'true',\r\n    resource: {\r\n      role: 'owner',\r\n      type: 'user',\r\n      // Add your own email address:\r\n      emailAddress: 'youremail@gmail.com'\r\n    }\r\n  });\r\n\r\n  // Add data as new rows\r\n  let sheetData = [['File Name', 'URL']];\r\n\r\n  res.data.files.map(entry => {\r\n    const { name, webViewLink } = entry;\r\n    sheetData.push([name, webViewLink]);\r\n  });\r\n\r\n  sheets.spreadsheets.values.append({\r\n    spreadsheetId: newSheet.data.spreadsheetId,\r\n    valueInputOption: 'USER_ENTERED',\r\n    range: 'A1',\r\n    resource: {\r\n      range: 'A1',\r\n      majorDimension: 'ROWS',\r\n      values: sheetData,\r\n    },\r\n  });\r\n\r\n  // Add styling to the first row\r\n  await sheets.spreadsheets.batchUpdate({\r\n    spreadsheetId: newSheet.data.spreadsheetId,\r\n    resource: {\r\n      requests: [\r\n        {\r\n          repeatCell: {\r\n            range: {\r\n              startRowIndex: 0,\r\n              endRowIndex: 1\r\n            },\r\n            cell: {\r\n              userEnteredFormat: {\r\n                backgroundColor: {\r\n                  red: 0.2,\r\n                  green: 0.2,\r\n                  blue: 0.2\r\n                },\r\n                textFormat: {\r\n                  foregroundColor: {\r\n                    red: 1,\r\n                    green: 1,\r\n                    blue: 1\r\n                  },\r\n                  bold: true,\r\n                }\r\n              }\r\n            },\r\n            fields: 'userEnteredFormat(backgroundColor,textFormat)'\r\n          }\r\n        },\r\n      ]\r\n    }\r\n  });\r\n\r\n  // Back-up data locally\r\n  let data = 'Name,URL\\n';\r\n\r\n  res.data.files.map(entry => {\r\n    const { name, webViewLink } = entry;\r\n    data += `${name},${webViewLink}\\n`;\r\n  });\r\n\r\n  fs.writeFile('data.csv', data, (err) => {\r\n    if (err) throw err;\r\n  });\r\n\r\n})()"]},"metadata":{},"sourceType":"module"}